{"version":3,"sources":["Recipe.js","SearchCountry.js","SearchProtein.js","Navbar.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","key","title","calories","image","ingredients","healthlabels","url","digest","React","useState","modalOpen","setModalOpen","className","Jumbotron","Container","Row","Col","xs","md","map","ingredient","text","healthlabel","Math","round","toLocaleString","onClick","Modal","toggle","isOpen","id","aria-label","type","aria-hidden","ModalBody","digestdata","label","parseInt","total","unit","ModalFooter","Button","color","src","alt","href","SearchCountry","props","dropdownOpen","setDropdownOpen","countries","handleClick","countryChoice","this","value","document","getElementById","sort","a","b","localeCompare","Dropdown","prevState","DropdownToggle","caret","DropdownMenu","country","DropdownItem","SearchProtein","proteins","proteinChoice","protein","NavBar","collapsed","setCollapsed","Navbar","light","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","Footer","App","recipes","setRecipes","search","setSearch","query","setQuery","exampleReq","useEffect","getRecipes","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","target","input","onChange","class","recipe","healthLabels","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d375894.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport { Button, Modal, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst Recipe = ({\n  key,\n  title,\n  calories,\n  image,\n  ingredients,\n  healthlabels,\n  url,\n  digest,\n}\n) => {\n    const [modalOpen, setModalOpen] = React.useState(false);\n  return (\n    <div className=\"resultBackground\">\n      <div className=\"resultBody\">\n        <Jumbotron className=\"resultBox\">\n          <Container>\n            <Row>\n              <Col>\n                <h1>{title}</h1>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={12} md={8}>\n                <h5>Ingredients</h5>\n                <ul className=\"list\">\n                  {ingredients.map((ingredient) => (\n                    <li>{ingredient.text}</li>\n                  ))}\n                </ul>\n\n                <h5>Health Labels:</h5>\n                <ul className=\"list list-no-dot\">\n                  {healthlabels.map((healthlabel) => (\n                    <li>\n                      <span className=\"badge bg-secondary healthlabel\">\n                        {healthlabel}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n\n                <h5>Calories: </h5>\n                <ul className=\"list list-no-dot\">\n                  <li>\n                    <span className=\"calories\">\n                      {Math.round(calories).toLocaleString()}\n                    </span>\n                  </li>\n                </ul>\n\n                <h5>Nutrient Level </h5>\n                <ul className=\"list list-no-dot\">\n                  <li>\n                    <span className=\"italicsWithLinks\" onClick={() => setModalOpen(!modalOpen)}>\n                    Check the nutrient level for this recipe.\n                    </span>\n                  </li>\n                </ul>\n\n                <Modal toggle={() => setModalOpen(!modalOpen)} isOpen={modalOpen}>\n                  <div className=\" modal-header\">\n                    <h5 className=\" modal-title\" id=\"exampleModalLabel\"></h5>\n                    <button\n                      aria-label=\"Close\"\n                      className=\" close\"\n                      type=\"button\"\n                      onClick={() => setModalOpen(!modalOpen)}\n                    >\n                      <span aria-hidden={true}>Ã—</span>\n                    </button>\n                  </div>\n                  <ModalBody>\n                  <h6>Nutrient level for {title}</h6>\n                    <ul className=\"list\">\n                      {digest.map((digestdata) => (\n                        <li>{digestdata.label} : {parseInt(digestdata.total)}{digestdata.unit}</li>\n                      ))}\n                    </ul>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button\n                      color=\"secondary\"\n                      type=\"button\"\n                      onClick={() => setModalOpen(!modalOpen)}\n                    >\n                      Close\n                    </Button>\n                  </ModalFooter>\n                </Modal>\n              </Col>\n\n              <Col xs={6} md={4} className=\"imageFrame\">\n                <img src={image} alt=\"\" className=\"resultImage\" />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <a href={url}>\n                  <button type=\"button\" className=\"btn btn-primary checkRecipe\">\n                    Click here to check out the Recipe!\n                  </button>\n                </a>\n              </Col>\n            </Row>\n          </Container>\n        </Jumbotron>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nconst SearchCountry = (props) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n  const countries = [\"Australian\", \"Chinese\", \"Japanese\", \"French\", \"American\", \"Italian\", \"English\", \"Vietnamese\", \"Thai\", \"Mexican\", \"Singaporean\", \"Korean\", \"German\", \"Russian\"]\n  \n  countries.sort(function(a,b) {\n      return a.localeCompare(b);\n  })\n\n  function handleClick (){\n      var countryChoice = this.value;\n      if (document.getElementById(\"text-input\").value === \"\"){\n        document.getElementById(\"text-input\").value = countryChoice;\n        } else {\n          document.getElementById(\"text-input\").value += \" \" + countryChoice;\n        }\n  }\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle caret>\n        By Popular Countries\n        </DropdownToggle>\n      <DropdownMenu>\n        {countries.map(function(country) {\n            return <DropdownItem \n            value={country}\n            onClick = {handleClick} \n            >{country}</DropdownItem>\n        })}\n      </DropdownMenu>\n    </Dropdown>\n  );\n}\n\nexport default SearchCountry;","import React, { useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nconst SearchProtein = (props) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n  const proteins = [\"Beef\", \"Pork\", \"Chicken\", \"Tofu\", \"Prawn\", \"Lamb\", \"Salmon\"]\n  \n  proteins.sort(function(a,b) {\n      return a.localeCompare(b);\n  })\n\n  function handleClick (){\n      var proteinChoice = this.value;\n      if (document.getElementById(\"text-input\").value === \"\"){\n      document.getElementById(\"text-input\").value = proteinChoice;\n      } else {\n        document.getElementById(\"text-input\").value += \" \" + proteinChoice;\n      }\n  }\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle caret>\n        By Popular Source of Protein\n        </DropdownToggle>\n      <DropdownMenu>\n        {proteins.map(function(protein) {\n            return <DropdownItem \n            value={protein}\n            onClick = {handleClick} \n            >{protein}</DropdownItem>\n        })}\n      </DropdownMenu>\n    </Dropdown>\n  );\n}\n\nexport default SearchProtein;","import React, { useState } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\nimport { FaTwitter, FaGithub } from \"react-icons/fa\";\n\nconst NavBar = (props) => {\n  const [collapsed, setCollapsed] = useState(true);\n  const toggleNavbar = () => setCollapsed(!collapsed);\n\n  return (\n    <div>\n      <Navbar light className=\"navbar\">\n        <NavbarBrand className=\"mr-auto\">Recipe Searcher</NavbarBrand>\n        <NavbarToggler onClick={toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!collapsed} navbar>\n          <Nav navbar>\n            <NavItem className=\"toggleBar\">\n              <NavLink href=\"https://twitter.com/nishiiSydDev\"><FaTwitter /> Twitter</NavLink>\n            </NavItem>\n            <NavItem className=\"toggleBar\">\n              <NavLink href=\"https://github.com/noriyuki-ishii-820/react-receipe-all\"><FaGithub /> GitHub</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from \"react\";\nimport { render } from \"react-dom\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n      <p>Developed by <a href=\"https://github.com/noriyuki-ishii-820\">Noriyuki Ishii</a> with the <a href=\"https://www.edamam.com/\"> Edamam API</a></p>\n    </footer>\n  );\n\nexport default Footer;","import React, {useEffect, useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Recipe from \"./Recipe\";\nimport SearchCountry from \"./SearchCountry\";\nimport SearchProtein from \"./SearchProtein\";\nimport NavBar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = \"5202907c\";\n  const APP_KEY = \"c72dd2f533820e0c77f3f2c967691418\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  const exampleReq =\n  `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n\n  useEffect(() => {\n    getRecipes()    \n  },[query])\n  \n  const getRecipes = async () => {\n      const response = await fetch(exampleReq);\n      const data = await response.json();\n      setRecipes(data.hits);\n      console.log(data.hits)\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value)\n    console.log(search)\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n\n    if (!e.target.value){\n      var input = document.getElementById(\"text-input\").value\n   \n      setQuery(input)\n    } else {\n      setQuery(search)\n    }\n\n    setSearch(\"\");\n  }\n  \n  return (\n      \n      <div className=\"App\">\n          <NavBar />\n          <Jumbotron className=\"searchBox \">\n            <h1>Type the Ingredients You have in Your Kitchen!</h1>\n            <form onSubmit={getSearch} className=\"search-form\">\n                <input className=\"search-bar\" id=\"text-input\" type=\"text\" value={search} onChange={updateSearch}/>\n                <button className=\"search-button btn-warning\" type=\"submit\">Search</button>\n            </form>\n            <h6>You can put multiple keywords, separating by space.</h6>\n            <br />\n            <h6>Or search by popular keywords:</h6>\n            <ul class=\"popularSearch\">\n              <li><SearchCountry /></li>\n              <li><SearchProtein /></li>\n            </ul>\n            \n          </Jumbotron>\n          {recipes.map(recipe => (\n              <Recipe\n                key= {recipe.recipe.label} \n                title={recipe.recipe.label} \n                calories={recipe.recipe.calories} \n                image = {recipe.recipe.image}\n                ingredients = {recipe.recipe.ingredients}\n                healthlabels = {recipe.recipe.healthLabels}\n                digest = {recipe.recipe.digest}\n                url = {recipe.recipe.url}\n              />\n          ))}\n          <Footer />\n      </div>\n\n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}